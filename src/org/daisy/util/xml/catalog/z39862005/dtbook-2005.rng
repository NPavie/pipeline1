<?xml version="1.0" encoding="utf-8"?>
<grammar  
  ns="http://www.daisy.org/z3986/2005/dtbook/"
  xmlns="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://www.ascc.net/xml/schematron"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"  
>
  <sch:ns prefix="dtbk" uri="http://www.daisy.org/z3986/2005/dtbook/"/>

  <a:documentation>
      Common RelaxNg schema for Z39.86 Dtbook version 2005 
      Last edit by: linuse 2006-10-19
	  Original version: mgylling 2005-07-01
      
      This schema only tests for things beyond the 
	  restrictions of 2005-1 and 2005-2 DTD.
	  
	  Version/change history:
	    le20061019: imported common tests from dtbook-2005-1.rng
      
  </a:documentation>
  
  <include href="../relaxngcommon/attributes.rng" />

  <sch:key name="notes" match="dtbk:note[@id]" path="@id"/>
  <sch:key name="annotations" match="dtbk:annotation[@id]" path="@id"/>

  <start>
      <ref name="root"/>  
  </start>
  
  <define name="root">
    <element name="dtbook">
      <ref name="dtbook.attlist"/>
      <oneOrMore>
        <ref name="anyElement"/>
      </oneOrMore>  
    </element>
  </define>
  
  <define name="dtbook.attlist">
    <attribute name="version">
      <text/>
    </attribute>
    <ref name="i18n.attributes"/>
  </define>
  
  <define name="i18n.attributes">
    <ref name="attribute.xml.lang.optional"/>
    <ref name="attribute.dir.optional"/>
  </define>
  
  <define name="anyElement">
    <element>
      <anyName>
	    <except>
	      <name>pagenum</name>
	    </except>
      </anyName>
      <zeroOrMore>
	    <choice>
	      <attribute>
		      <anyName/>  
	      </attribute>
	      <text/>
	      <ref name="anyElement"/>
	      <ref name="pagenum"/>
	    </choice>
      </zeroOrMore>
    </element>
  </define>
  
  <define name="pagenum">
  	<element name="pagenum">
		<zeroOrMore>
	  		<attribute>	
	  			<anyName>
	  				<except>
	  					<name ns="">page</name>
	  				</except>
	  			</anyName>	
	  		</attribute>
		</zeroOrMore>
  		<choice>
  			<group>
  				<attribute name="page">
  					<value type="string">front</value>
  				</attribute>
  				<ref name="datatype.romannumeral"/>
  			</group>
  			<group>
  				<attribute name="page">
  					<value type="string">normal</value>
  				</attribute>
  				<ref name="datatype.positiveInteger"/>
  			</group>
  			<group>
  				<attribute name="page">
  					<value type="string">special</value>
  				</attribute>
  				<text/>
  			</group>
  		</choice>
  	</element>
  </define>
		
  <sch:pattern name="dtbook_MetaUid" id="dtbook_MetaUid">
    <!-- dtb:uid meta element exists -->
    <sch:rule context="dtbk:head">
      <sch:assert test="count(dtbk:meta[@name='dtb:uid'])=1"> 
        [sch][zedid::dtbook_MetaUid]
      </sch:assert>        
    </sch:rule>
  </sch:pattern> 

  <sch:pattern name="dtbook_MetaTitle" id="dtbook_MetaTitle">
    <sch:rule context="dtbk:head">
      <sch:assert test="count(dtbk:meta[@name='dc:Title'])=1"> 
        [sch][zedid::dtbook_MetaTitle]
      </sch:assert>  
    </sch:rule>
  </sch:pattern>

  <sch:pattern name="dtbook_idrefNote" id="dtbook_idrefNote">
    <sch:rule context="dtbk:noteref">	  
	  <sch:assert test="contains(@idref, '#')">
	    [sch][zedid::dtbook_noteFragment]
	  </sch:assert>
	  <sch:report test="contains(@idref, '#') and string-length(substring-before(@idref, '#'))=0 and count(key('notes',substring(current()/@idref,2)))!=1">
	    [sch][zedid::dtbook_idrefNote]
	  </sch:report>
	  <!-- Do not perform any checks on external note references
	       since you cannot set a URIResolver in Jing
	  <sch:report test="string-length(substring-before(@idref, '#'))>0 and not(document(substring-before(@idref, '#')))">External document does not exist</sch:report>
	  <sch:report test="string-length(substring-before(@idref, '#'))>0 and count(document(substring-before(@idref, '#'))//dtbk:note[@id=substring-after(current()/@idref, '#')])!=1">Incorrect external fragment identifier</sch:report>
	  -->
    </sch:rule>
  </sch:pattern>  

  <sch:pattern name="dtbook_idrefAnnotation" id="dtbook_idrefAnnotation">
    <sch:rule context="dtbk:annoref">
      <sch:assert test="contains(@idref, '#')">
	    [sch][zedid::dtbook_annotationFragment]
	  </sch:assert>
	  <sch:report test="contains(@idref, '#') and string-length(substring-before(@idref, '#'))=0 and count(key('annotations',substring(current()/@idref,2)))!=1">
	    [sch][zedid::dtbook_idrefAnnotation]
	  </sch:report>
	  <!-- Do not perform any checks on external note references
	       since you cannot set a URIResolver in Jing
	  <sch:report test="string-length(substring-before(@idref, '#'))>0 and not(document(substring-before(@idref, '#')))">External document does not exist</sch:report>
	  <sch:report test="string-length(substring-before(@idref, '#'))>0 and count(document(substring-before(@idref, '#'))//dtbk:annotation[@id=substring-after(current()/@idref, '#')])!=1">Incorrect external fragment identifier</sch:report>
	  -->
    </sch:rule>
  </sch:pattern>
  
  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_internalLinks" id="dtbook_internalLinks">
  	<sch:rule context="dtbk:a[starts-with(@href, '#')]">
  		<sch:assert test="count(//dtbk:*[@id=substring(current()/@href, 2)])=1">
  		[sch][zedid::dtbook_internalLinks]
  		</sch:assert>
  	</sch:rule>  	
  </sch:pattern>  
  
  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_enumAttrInList" id="dtbook_enumAttrInList">
    <sch:rule context="dtbk:list">
    	<sch:report test="@enum and @type!='ol'">
	    	[sch][zedid::dtbook_enumAttrInList]
    	</sch:report>
    </sch:rule>
  </sch:pattern>
  
  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_depthList" id="dtbook_depthList">
    <sch:rule context="dtbk:list">
    	<sch:report test="@depth and @depth!=count(ancestor-or-self::dtbk:list)">
	    	[sch][zedid::dtbook_depthList]    
    	</sch:report>
    </sch:rule>
  </sch:pattern>
  
  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_headersThTd" id="dtbook_headersThTd">
    <sch:rule context="dtbk:*[@headers and (self::dtbk:th or self::dtbk:td)]">
    	<sch:assert test="
    		count(
    			ancestor::dtbk:table//dtbk:th/@id[contains( concat(' ',current()/@headers,' '), concat(' ',normalize-space(),' ') )]
			) = 
			string-length(normalize-space(@headers)) - string-length(translate(normalize-space(@headers), ' ','')) + 1
		">
		[sch][zedid::dtbook_headersThTd]
		</sch:assert>
	</sch:rule>
  </sch:pattern>
  
  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_imgrefProdnote" id="dtbook_imgrefProdnote">
    <sch:rule context="dtbk:prodnote[@imgref]">
    	<sch:assert test="
    		count(
    			//dtbk:img/@id[contains( concat(' ',current()/@imgref,' '), concat(' ',normalize-space(),' ') )]
			) = 
			string-length(normalize-space(@imgref)) - string-length(translate(normalize-space(@imgref), ' ','')) + 1
		">
		[sch][zedid::dtbook_imgrefProdnote]
		</sch:assert>
	</sch:rule>
  </sch:pattern>

  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->  
  <sch:pattern name="dtbook_imgrefCaption" id="dtbook_imgrefCaption">
    <sch:rule context="dtbk:caption[@imgref]">
    	<sch:assert test="
    		count(
    			//dtbk:img/@id[contains( concat(' ',current()/@imgref,' '), concat(' ',normalize-space(),' ') )]
			) = 
			string-length(normalize-space(@imgref)) - string-length(translate(normalize-space(@imgref), ' ','')) + 1
		">
		[sch][zedid::dtbook_imgrefCaption]
		</sch:assert>
	</sch:rule>
  </sch:pattern>
  
  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_accesskeyTabindex" id="dtbook_accesskeyTabindex">
    <sch:rule context="dtbk:a">
    	<sch:report test="@accesskey and string-length(@accesskey)!=1">[sch][zedid::dtbook_accesskeyLength]</sch:report>
    	<sch:report test="@tabindex and string-length(translate(@width,'0123456789',''))!=0">[sch][zedid::dtbook_tabindexNumeric]</sch:report>
    	<sch:report test="@accesskey and count(//dtbk:a/@accesskey=@accesskey)!=1">[sch][zedid::dtbook_accesskeyUnique]</sch:report>
    	<sch:report test="@tabindex and count(//dtbk:a/@tabindex=@tabindex)!=1">[sch][zedid::dtbook_tabindexUnique]</sch:report>
    </sch:rule>
  </sch:pattern>    

  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_charAttribute" id="dtbook_charAttribute">
    <sch:rule context="dtbk:*[self::dtbk:col   or self::dtbk:colgroup or self::dtbk:tbody or self::dtbk:td or 
                              self::dtbk:tfoot or self::dtbk:th       or self::dtbk:thead or self::dtbk:tr]">
    	<sch:report test="@char and string-length(@char)!=1">[sch][zedid::dtbook_charAttributeLength]</sch:report>
    	<sch:report test="@char and @align!='char'">[sch][zedid::dtbook_charAttributeAlign] </sch:report>
    </sch:rule>
  </sch:pattern>
  
  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_imgWidthHeight" id="dtbook_imgWidthHeight">
    <sch:rule context="dtbk:img">
    	<sch:assert test="not(@width) or 
    	                  string-length(translate(@width,'0123456789',''))=0 or
    	                  (contains(@width,'%') and substring-after(@width,'%')='' and translate(@width,'%0123456789','')='' and string-length(@width)>=2)"
    	   >[sch][zedid::dtbook_imgWidth]</sch:assert>
    	   <sch:assert test="not(@height) or 
    	                  string-length(translate(@height,'0123456789',''))=0 or
    	                  (contains(@height,'%') and substring-after(@height,'%')='' and translate(@height,'%0123456789','')='' and string-length(@height)>=2)"
    	   >[sch][zedid::dtbook_imgHeight]</sch:assert>
    </sch:rule>
  </sch:pattern>
  
  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_tableAttributes" id="dtbook_tableAttributes">
    <sch:rule context="dtbk:table">
    	<sch:assert test="not(@width) or 
    	                  string-length(translate(@width,'0123456789',''))=0 or
    	                  (contains(@width,'%') and substring-after(@width,'%')='' and translate(@width,'%0123456789','')='' and string-length(@width)>=2)"
    	   >[sch][zedid::dtbook_tableWidth </sch:assert>
   	 	<sch:assert test="not(@cellspacing) or 
    	                  string-length(translate(@cellspacing,'0123456789',''))=0 or
    	                  (contains(@cellspacing,'%') and substring-after(@cellspacing,'%')='' and translate(@cellspacing,'%0123456789','')='' and string-length(@cellspacing)>=2)"
    	   >[sch][zedid::dtbook_tableCellspacing]</sch:assert>
		<sch:assert test="not(@cellpadding) or 
    	                  string-length(translate(@cellpadding,'0123456789',''))=0 or
    	                  (contains(@cellpadding,'%') and substring-after(@cellpadding,'%')='' and translate(@cellpadding,'%0123456789','')='' and string-length(@cellpadding)>=2)"
    	   >[sch][zedid::dtbook_tableCellpadding] </sch:assert>
    </sch:rule>
  </sch:pattern>
  
  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_startAttrInList" id="dtbook_startAttrInList">
    <sch:rule context="dtbk:list">
    	<sch:report test="@start and @type!='ol'">[sch][zedid::dtbook_startAttrInList]</sch:report>
    	<sch:report test="@start='' or string-length(translate(@start,'0123456789',''))!=0">[sch][zedid::dtbook_startAttrNonNegative]</sch:report>
    </sch:rule>
  </sch:pattern> 

  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_dcMetadata" id="dtbook_dcMetadata">
    <sch:rule context="dtbk:meta">
    	<sch:report test="starts-with(@name, 'dc:') and not(@name='dc:Title' or @name='dc:Subject' or @name='dc:Description' or
    	                                                    @name='dc:Type' or @name='dc:Source' or @name='dc:Relation' or 
    	                                                    @name='dc:Coverage' or @name='dc:Creator' or @name='dc:Publisher' or 
    	                                                    @name='dc:Contributor' or @name='dc:Rights' or @name='dc:Date' or 
    	                                                    @name='dc:Format' or @name='dc:Identifier' or @name='dc:Language')"
                          >[sch][zedid::dtbook_dcAttrNamePart]</sch:report>
       <sch:report test="starts-with(@name, 'DC:') or starts-with(@name, 'Dc:') or starts-with(@name, 'dC:')">[sch][zedid::dtbook_dcAttrPrefixPart]</sch:report>
    </sch:rule>
  </sch:pattern>

  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->
  <sch:pattern name="dtbook_spanColColgroup" id="dtbook_spanColColgroup">
    <sch:rule context="dtbk:*[self::dtbk:col or self::dtbk:colgroup]">
    	<sch:report test="@span and (translate(@span,'0123456789','')!='' or starts-with(@span,'0'))">[sch][zedid::dtbook_spanColColgroup]</sch:report>
    </sch:rule>
  </sch:pattern>

  <!-- MG20061101: added as a consequence of zedval feature request #1565049 -->  
  <sch:pattern name="dtbook_rowspanColspan" id="dtbook_rowspanColspan">
    <sch:rule context="dtbk:*[self::dtbk:td or self::dtbk:th]">
    	<sch:report test="@rowspan and (translate(@rowspan,'0123456789','')!='' or starts-with(@rowspan,'0'))">[sch][zedid::dtbook_rowSpanValue]</sch:report>
    	<sch:report test="@colspan and (translate(@colspan,'0123456789','')!='' or starts-with(@colspan,'0'))">[sch][zedid::dtbook_colSpanValue]</sch:report>    	
    	<sch:report test="@rowspan and number(@rowspan) > count(parent::dtbk:tr/following-sibling::dtbk:tr)+1">[sch][zedid::dtbook_rowSpanRelativeValue]</sch:report>
    </sch:rule>
  </sch:pattern>  
  
	          
</grammar>