/* * LimSee3 * A cross-platform multimedia authoring tool * * Copyright (C) INRIA. All rights reserved. * For details on use and redistribution please refer to [$HOME/Licence.txt]. */package org.daisy.util.text;import static junit.framework.Assert.*;import java.net.URI;import java.net.URISyntaxException;import java.util.LinkedList;import java.util.List;import org.junit.Test;/** * <p> * Tests the URLUtils class. * The URI have been taken from http://www.ninebynine.org/Software/HaskellUtils/Network/URITestDescriptions.html. * </p> * * @author Romain Deltour */public class URIUtilsTest {    /**     * Tests that {@link URISyntaxException} are throwed when required.     */	@Test    public void testSyntax() {        // Valid URIs        try {            // Syntaxically valid            assertEquals(new URI("http://example.org/aaa/bbb#ccc"), URIUtils.createURI("http://example.org/aaa/bbb#ccc"));            assertEquals(new URI("mailto:local@domain.org"), URIUtils.createURI("mailto:local@domain.org"));            assertEquals(new URI("mailto:local@domain.org#frag"), URIUtils.createURI("mailto:local@domain.org#frag"));            assertEquals(new URI("HTTP://EXAMPLE.ORG/AAA/BBB#CCC"), URIUtils.createURI("HTTP://EXAMPLE.ORG/AAA/BBB#CCC"));            assertEquals(new URI("//example.org/aaa/bbb#ccc"), URIUtils.createURI("//example.org/aaa/bbb#ccc"));            assertEquals(new URI("/aaa/bbb#ccc"), URIUtils.createURI("/aaa/bbb#ccc"));            assertEquals(new URI("bbb#ccc"), URIUtils.createURI("bbb#ccc"));            assertEquals(new URI("#ccc"), URIUtils.createURI("#ccc"));            assertEquals(new URI("#"), URIUtils.createURI("#"));            assertEquals(new URI("/"), URIUtils.createURI("/"));            assertEquals(new URI("http://example.org/aaa/bbb#ccc"), URIUtils.createURI("http://example.org/aaa%2fbbb#ccc"));            assertEquals(new URI("http://example.org/aaa/bbb#ccc"), URIUtils.createURI("http://example.org/aaa%2Fbbb#ccc"));            assertEquals(new URI("/"), URIUtils.createURI("%2F"));            assertEquals(new URI("aaa/bbb"), URIUtils.createURI("aaa%2Fbbb"));            assertEquals(new URI("http://example.org:80/aaa/bbb#ccc"), URIUtils.createURI("http://example.org:80/aaa/bbb#ccc"));            assertEquals(new URI("http://example.org:/aaa/bbb#ccc"), URIUtils.createURI("http://example.org:/aaa/bbb#ccc"));            assertEquals(new URI("http://example.org./aaa/bbb#ccc"), URIUtils.createURI("http://example.org./aaa/bbb#ccc"));            assertEquals(new URI("http://example.123./aaa/bbb#ccc"), URIUtils.createURI("http://example.123./aaa/bbb#ccc"));            assertEquals(new URI("http://example.org"), URIUtils.createURI("http://example.org"));            assertEquals(new URI("http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html"), URIUtils.createURI("http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html"));            assertEquals(new URI("http://[1080:0:0:0:8:800:200C:417A]/index.html"), URIUtils.createURI("http://[1080:0:0:0:8:800:200C:417A]/index.html"));            assertEquals(new URI("http://[3ffe:2a00:100:7031::1]"), URIUtils.createURI("http://[3ffe:2a00:100:7031::1]"));            assertEquals(new URI("http://[1080::8:800:200C:417A]/foo"), URIUtils.createURI("http://[1080::8:800:200C:417A]/foo"));            assertEquals(new URI("http://[::192.9.5.5]/ipng"), URIUtils.createURI("http://[::192.9.5.5]/ipng"));            assertEquals(new URI("http://[::FFFF:129.144.52.38]:80/index.html"), URIUtils.createURI("http://[::FFFF:129.144.52.38]:80/index.html"));            assertEquals(new URI("http://[2010:836B:4179::836B:4179]"), URIUtils.createURI("http://[2010:836B:4179::836B:4179]"));            assertEquals(new URI("//[2010:836B:4179::836B:4179]"), URIUtils.createURI("//[2010:836B:4179::836B:4179]"));            assertEquals(new URI("./aaa"), URIUtils.createURI("./aaa"));            assertEquals(new URI("../aaa"), URIUtils.createURI("../aaa"));            assertEquals(new URI("g:h"), URIUtils.createURI("g:h"));            assertEquals(new URI("g"), URIUtils.createURI("g"));            assertEquals(new URI("./g"), URIUtils.createURI("./g"));            assertEquals(new URI("g/"), URIUtils.createURI("g/"));            assertEquals(new URI("/g"), URIUtils.createURI("/g"));            assertEquals(new URI("//g"), URIUtils.createURI("//g"));            assertEquals(new URI("?y"), URIUtils.createURI("?y"));            assertEquals(new URI("g?y"), URIUtils.createURI("g?y"));            assertEquals(new URI("#s"), URIUtils.createURI("#s"));            assertEquals(new URI("g#s"), URIUtils.createURI("g#s"));            assertEquals(new URI("g?y#s"), URIUtils.createURI("g?y#s"));            assertEquals(new URI(";x"), URIUtils.createURI(";x"));            assertEquals(new URI("g;x"), URIUtils.createURI("g;x"));            assertEquals(new URI("g;x?y#s"), URIUtils.createURI("g;x?y#s"));            assertEquals(new URI("."), URIUtils.createURI("."));            assertEquals(new URI("./"), URIUtils.createURI("./"));            assertEquals(new URI(".."), URIUtils.createURI(".."));            assertEquals(new URI("../"), URIUtils.createURI("../"));            assertEquals(new URI("../g"), URIUtils.createURI("../g"));            assertEquals(new URI("../.."), URIUtils.createURI("../.."));            assertEquals(new URI("../../"), URIUtils.createURI("../../"));            assertEquals(new URI("../../g"), URIUtils.createURI("../../g"));            assertEquals(new URI("../../../g"), URIUtils.createURI("../../../g"));            assertEquals(new URI("../../../../g"), URIUtils.createURI("../../../../g"));            assertEquals(new URI("/./g"), URIUtils.createURI("/./g"));            assertEquals(new URI("/../g"), URIUtils.createURI("/../g"));            assertEquals(new URI("g."), URIUtils.createURI("g."));            assertEquals(new URI(".g"), URIUtils.createURI(".g"));            assertEquals(new URI("g.."), URIUtils.createURI("g.."));            assertEquals(new URI("..g"), URIUtils.createURI("..g"));            assertEquals(new URI("./../g"), URIUtils.createURI("./../g"));            assertEquals(new URI("./g/."), URIUtils.createURI("./g/."));            assertEquals(new URI("g/./h"), URIUtils.createURI("g/./h"));            assertEquals(new URI("g/../h"), URIUtils.createURI("g/../h"));            assertEquals(new URI("g;x=1/./y"), URIUtils.createURI("g;x=1/./y"));            assertEquals(new URI("g;x=1/../y"), URIUtils.createURI("g;x=1/../y"));            assertEquals(new URI("g?y/./x"), URIUtils.createURI("g?y/./x"));            assertEquals(new URI("g?y/../x"), URIUtils.createURI("g?y/../x"));            assertEquals(new URI("g#s/./x"), URIUtils.createURI("g#s/./x"));            assertEquals(new URI("g#s/../x"), URIUtils.createURI("g#s/../x"));            assertEquals(new URI(""), URIUtils.createURI(""));            assertEquals(new URI("A'C"), URIUtils.createURI("A'C"));            assertEquals(new URI("A$C"), URIUtils.createURI("A$C"));            assertEquals(new URI("A@C"), URIUtils.createURI("A@C"));            assertEquals(new URI("http://example/Andr&#567"), URIUtils.createURI("http://example/Andr&#567"));            assertEquals(new URI("file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/"), URIUtils.createURI("file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/"));            assertEquals(new URI("http://46229EFFE16A9BD60B9F1BE88B2DB047ADDED785/demo.mp3"), URIUtils.createURI("http://46229EFFE16A9BD60B9F1BE88B2DB047ADDED785/demo.mp3"));            assertEquals(new URI("http://example++/"), URIUtils.createURI("http://example++/"));        } catch (URISyntaxException e) {            String execPoint = null;            for (int i = 0; i < e.getStackTrace().length; i++) {                StackTraceElement ste = e.getStackTrace()[i];                if ("testSyntax".equals(ste.getMethodName())) {                    execPoint = ste.toString();                }            }            fail("Shouldn't throw a syntax error\n" + "Reason: " + e.toString() + "\nAt: " + execPoint);        }        // Invalid URIs        List<String> invalidUris = new LinkedList<String>();        invalidUris.add("http://ui@:12");        invalidUris.add("%");        invalidUris.add("A%Z");        invalidUris.add("%ZZ");        invalidUris.add("%AZ");        invalidUris.add("[2010:836B:4179::836B:4179]");        invalidUris.add("http://foo.org:80Path/More");        invalidUris.add("ht tp://foo.org:80/More");        //invalidUris.add("::");        invalidUris.add("http://[xyz]/");        for (String invalidUri : invalidUris) {            try {                URIUtils.createURI(invalidUri);                fail(new StringBuilder().append("Should raise syntax error for \"").append(invalidUri).append('\"').toString());            } catch (URISyntaxException e) {                assertTrue(true);            }        }    }    /**     * Tests the encoding functions.     */	@Test    public void testCreateURI() {        // Illegal characters        try {            // Various illegal characters            assertEquals(new URI("A%20C"), URIUtils.createURI("A C"));            assertEquals(new URI("A%22C"), URIUtils.createURI("A\"C"));            assertEquals(new URI("A%60C"), URIUtils.createURI("A`C"));            assertEquals(new URI("A%3CC"), URIUtils.createURI("A<C"));            assertEquals(new URI("A%3EC"), URIUtils.createURI("A>C"));            assertEquals(new URI("A%5EC"), URIUtils.createURI("A^C"));            assertEquals(new URI("A%5CC"), URIUtils.createURI("A\\C"));            assertEquals(new URI("A%7BC"), URIUtils.createURI("A{C"));            assertEquals(new URI("A%7CC"), URIUtils.createURI("A|C"));            assertEquals(new URI("A%7DC"), URIUtils.createURI("A}C"));            assertEquals(new URI("A%5BC"), URIUtils.createURI("A[C"));            assertEquals(new URI("A%5DC"), URIUtils.createURI("A]C"));            assertEquals(new URI("A日本C"), URIUtils.createURI("A日本C"));            assertEquals(new URI("A日本C"), URIUtils.createURI("A%E6%97%A5%E6%9C%ACC"));            // In user info            assertEquals(new URI("http://us%20er@host:80/path?query#frag"), URIUtils.createURI("http://us er@host:80/path?query#frag"));            assertEquals(new URI("http://us%20er@host:80/path?query#frag"), URIUtils.createURI("http://us%20er@host:80/path?query#frag"));            // In host            assertEquals(new URI("http://user@ho%20st:80/path?query#frag"), URIUtils.createURI("http://user@ho st:80/path?query#frag"));            assertEquals(new URI("http://user@ho%20st:80/path?query#frag"), URIUtils.createURI("http://user@ho%20st:80/path?query#frag"));            // In path            assertEquals(new URI("http://user@host:80/pa%20th?query#frag"), URIUtils.createURI("http://user@host:80/pa th?query#frag"));            assertEquals(new URI("http://user@host:80/pa%20th?query#frag"), URIUtils.createURI("http://user@host:80/pa%20th?query#frag"));            // In query            assertEquals(new URI("http://user@host:80/path?que%20ry#frag"), URIUtils.createURI("http://user@host:80/path?que ry#frag"));            assertEquals(new URI("http://user@host:80/path?que%20ry#frag"), URIUtils.createURI("http://user@host:80/path?que%20ry#frag"));            // In fragement            assertEquals(new URI("http://user@host:80/path?query#fr%20ag"), URIUtils.createURI("http://user@host:80/path?query#fr ag"));            assertEquals(new URI("http://user@host:80/path?query#fr%20ag"), URIUtils.createURI("http://user@host:80/path?query#fr%20ag"));            // Decode slash in path            assertEquals(new URI("file:///c:/dir/file.tmp"), URIUtils.createURI("file:///c:/dir%2Ffile.tmp"));            assertEquals(new URI("rel/path"), URIUtils.createURI("rel%2Fpath")); //in first segment of a relative            assertEquals(new URI("/relpath"), URIUtils.createURI("%2Frelpath")); //in firstchar of a relative            assertEquals(new URI("file:///c:/dir/file.tmp"), URIUtils.createURI("file:///c:/dir%2ffile.tmp"));            assertEquals(new URI("rel/path"), URIUtils.createURI("rel%2fpath")); //in first segment of a relative            assertEquals(new URI("/relpath"), URIUtils.createURI("%2frelpath")); //in firstchar of a relative            // Keep colon encoded in rel path, decode otherwise            assertEquals(new URI("file:///c:/dir/file.tmp"), URIUtils.createURI("file:///c%3A/dir/file.tmp"));// in an authorized place            assertEquals(new URI("/:"), URIUtils.createURI("%2f%3a"));// in an authorized place (hidden by percent encoded slash)            assertEquals(new URI("rel%3Apath"), URIUtils.createURI("rel%3Apath")); // in first segment of a relative            assertEquals(new URI("rel%3Apath%3Apath"), URIUtils.createURI("rel%3Apath%3Apath")); // many times in first segment of a relative            assertEquals(new URI("%253A"), URIUtils.createURI("%253A"));// encoded percent char        } catch (URISyntaxException e) {            fail("Syntax exception with URI <" + e.getInput() + '>');        }    }    /**     * Tests the {@link URIUtils#decode(String)} method.     */	@Test    public void testDecode() {        assertEquals("日本", URIUtils.decode("%E6%97%A5%E6%9C%AC",null));        assertEquals("%3A", URIUtils.decode("%253A",null));        assertEquals("%253A", URIUtils.decode("%253A","%"));        assertEquals("++", URIUtils.decode("++"));    }	    /**     * Tests the {@link URIUtils#encodeColon(CharSequence)} method.     */	@Test    public void testEncodeColon() {        assertEquals("b%3Ab", URIUtils.encodeColon("b:b"));        assertEquals("b%3Ab%3Ab", URIUtils.encodeColon("b:b:b"));        assertEquals("b?b:b", URIUtils.encodeColon("b?b:b"));        assertEquals("b/b:b", URIUtils.encodeColon("b/b:b"));        assertEquals("b%3Ab/b:b", URIUtils.encodeColon("b:b/b:b"));        assertEquals("b?b:b/b", URIUtils.encodeColon("b?b:b/b"));        assertEquals("b%3Ab%3Ab/b:b?b:b", URIUtils.encodeColon("b:b:b/b:b?b:b"));    }    /**     * Tests the {@link URIUtils#normalizeFileURI(URI)} method.     */	@Test    public void testNormalizeFileUri() {        try {            URIUtils.normalizeFileURI(new URI("mailto:wam@inria.fr"));            fail("Should raise invalid arg for not supported URI");        } catch (IllegalArgumentException e) {            assertTrue(true);        } catch (URISyntaxException e) {            throw new Error("The URI spec should be well formed.", e); // Shouldn't happen        }        try {            URI absWinPathURI = new URI("file:///c:/dir/file.tmp");            URI absWinRootURI = new URI("file:///c:/");            URI absWinRootFragURI = new URI("file:///c:/#frag");            URI absUnixPathURI = new URI("file:///dir/file.tmp");            URI absUnixRootURI = new URI("file:///");            URI absUnixRootFragURI = new URI("file:///#frag");            URI absUnixRootQFURI = new URI("file:///?query#frag");            URI absUncPathURI = new URI("file://host/share/file.tmp");            URI absUncHostURI = new URI("file://host/");            URI absUncHostQFURI = new URI("file://host/?q#f");            URI relWinPathURI = new URI("c%3Adir/file.tmp");            URI relWinPathEmptyURI = new URI("c%3A");            URI relUnixPathURI = new URI("dir/file.tmp");            // Tests the parameter is returned if normal            assertSame(absWinPathURI, URIUtils.normalizeFileURI(absWinPathURI));            assertSame(absWinRootURI, URIUtils.normalizeFileURI(absWinRootURI));            assertSame(absWinRootFragURI, URIUtils.normalizeFileURI(absWinRootFragURI));            assertSame(absUnixPathURI, URIUtils.normalizeFileURI(absUnixPathURI));            assertSame(absUnixRootURI, URIUtils.normalizeFileURI(absUnixRootURI));            assertSame(absUnixRootFragURI, URIUtils.normalizeFileURI(absUnixRootFragURI));            assertSame(absUnixRootQFURI, URIUtils.normalizeFileURI(absUnixRootQFURI));            assertSame(absUncPathURI, URIUtils.normalizeFileURI(absUncPathURI));            assertSame(absUncHostURI, URIUtils.normalizeFileURI(absUncHostURI));            assertSame(absUncHostQFURI, URIUtils.normalizeFileURI(absUncHostQFURI));            // Absolute win path URI            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:c:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:/c:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://c:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:///c:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:////c:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://///c:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://localhost/c:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:c%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:/c%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://c%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:///c%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:////c%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://///c%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://localhost/c%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:C:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:/C:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://C:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:///C:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:////C:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://///C:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://localhost/C:/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:C%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:/C%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://C%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:///C%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:////C%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://///C%3a/dir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://localhost/C%3a/dir/file.tmp")));            assertEquals(absWinRootFragURI, URIUtils.normalizeFileURI(new URI("file://c:/#frag")));            assertEquals(absWinRootFragURI, URIUtils.normalizeFileURI(new URI("file://C:/#frag")));            assertEquals(absWinRootFragURI, URIUtils.normalizeFileURI(new URI("file:///c:/#frag")));            assertEquals(absWinRootFragURI, URIUtils.normalizeFileURI(new URI("file:///C:/#frag")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:c:/dir%2ffile.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:/c:/dir%2ffile.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://c:/dir%2ffile.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:///c:/dir%2ffile.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:////c:/dir%2ffile.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://///c:/dir%2ffile.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:c:%2Fdir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:/c:%2Fdir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://c:%2Fdir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:///c:%2Fdir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file:////c:%2Fdir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://///c:%2Fdir/file.tmp")));            assertEquals(absWinPathURI, URIUtils.normalizeFileURI(new URI("file://localhost/c:%2Fdir/file.tmp")));            // Absolute win root path URI            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:c:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:/c:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://c:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:///c:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:////c:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://///c:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://localhost/c:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:c%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:/c%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://c%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:///c%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:////c%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://///c%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://localhost/c%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:C:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:/C:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://C:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:///C:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:////C:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://///C:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://localhost/C:/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:C%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:/C%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://C%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:///C%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file:////C%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://///C%3a/")));            assertEquals(absWinRootURI, URIUtils.normalizeFileURI(new URI("file://localhost/C%3a/")));            // Absolute unix path URI            assertEquals(absUnixPathURI, URIUtils.normalizeFileURI(new URI("file:/dir/file.tmp")));            assertEquals(absUnixPathURI, URIUtils.normalizeFileURI(new URI("file:///dir/file.tmp")));            assertEquals(absUnixPathURI, URIUtils.normalizeFileURI(new URI("file://///dir/file.tmp")));            assertEquals(absUnixPathURI, URIUtils.normalizeFileURI(new URI("file://localhost/dir/file.tmp")));            assertEquals(absUnixPathURI, URIUtils.normalizeFileURI(new URI("file:/dir%2ffile.tmp")));            assertEquals(absUnixPathURI, URIUtils.normalizeFileURI(new URI("file:/dir%2ffile.tmp")));            assertEquals(absUnixRootFragURI, URIUtils.normalizeFileURI(new URI("file:/#frag")));            assertEquals(absUnixRootFragURI, URIUtils.normalizeFileURI(new URI("file://#frag")));            assertEquals(absUnixRootFragURI, URIUtils.normalizeFileURI(new URI("file:///#frag")));            assertEquals(absUnixRootFragURI, URIUtils.normalizeFileURI(new URI("file:////#frag")));            assertEquals(absUnixRootQFURI, URIUtils.normalizeFileURI(new URI("file:/?query#frag")));            assertEquals(absUnixRootQFURI, URIUtils.normalizeFileURI(new URI("file://?query#frag")));            assertEquals(absUnixRootQFURI, URIUtils.normalizeFileURI(new URI("file:///?query#frag")));            assertEquals(absUnixRootQFURI, URIUtils.normalizeFileURI(new URI("file:////?query#frag")));            // Absolute unix root path URI            assertEquals(absUnixRootURI, URIUtils.normalizeFileURI(new URI("file:/")));            assertEquals(absUnixRootURI, URIUtils.normalizeFileURI(new URI("file://localhost")));            assertEquals(absUnixRootURI, URIUtils.normalizeFileURI(new URI("file://localhost/")));            assertEquals(absUnixRootURI, URIUtils.normalizeFileURI(new URI("file:///")));            assertEquals(absUnixRootURI, URIUtils.normalizeFileURI(new URI("file:////")));            assertEquals(absUnixRootURI, URIUtils.normalizeFileURI(new URI("file://///")));            // Absolute UNC path URI            assertEquals(absUncPathURI, URIUtils.normalizeFileURI(new URI("file:////host/share/file.tmp")));            assertEquals(absUncPathURI, URIUtils.normalizeFileURI(new URI("file://host/share/file.tmp")));            assertEquals(absUncHostURI, URIUtils.normalizeFileURI(new URI("file://host")));            assertEquals(absUncHostURI, URIUtils.normalizeFileURI(new URI("file:////host")));            assertEquals(absUncHostURI, URIUtils.normalizeFileURI(new URI("file:////host/")));            assertEquals(absUncHostQFURI, URIUtils.normalizeFileURI(new URI("file:////host?q#f")));            assertEquals(absUncHostQFURI, URIUtils.normalizeFileURI(new URI("file:////host/?q#f")));            // Relative win path URI            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:c:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:/c:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://c:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:///c:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:////c:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://///c:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://localhost/c:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:c%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:/c%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://c%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:///c%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:////c%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://///c%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://localhost/c%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:C:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:/C:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://C:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:///C:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:////C:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://///C:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://localhost/C:dir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:C%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:/C%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://C%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:///C%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file:////C%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://///C%3adir/file.tmp")));            assertEquals(relWinPathURI, URIUtils.normalizeFileURI(new URI("file://localhost/C%3adir/file.tmp")));            assertEquals(new URI("c%3A#frag"), URIUtils.normalizeFileURI(new URI("file://c:#frag")));            assertEquals(new URI("c%3A#frag"), URIUtils.normalizeFileURI(new URI("file://C:#frag")));            assertEquals(new URI("c%3A#frag"), URIUtils.normalizeFileURI(new URI("file:///c:#frag")));            assertEquals(new URI("c%3A#frag"), URIUtils.normalizeFileURI(new URI("file:///C:#frag")));            assertEquals(new URI("c%3A?query#frag"), URIUtils.normalizeFileURI(new URI("file:///c:?query#frag")));            assertEquals(new URI("c%3A?query#frag"), URIUtils.normalizeFileURI(new URI("file:///C:?query#frag")));            assertEquals(new URI("c%3Adir/file.tmp"), URIUtils.normalizeFileURI(new URI("file:c:dir%2Ffile.tmp")));            assertEquals(new URI("c%3Adir%3Ab%3Ab/b:b?b:b"), URIUtils.normalizeFileURI(new URI("file:///c:dir:b:b/b:b?b:b")));            // Relative win empty path URI            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:c:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:/c:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://c:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:///c:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:////c:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://///c:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://localhost/c:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:C:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:/C:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://C:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:///C:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:////C:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://///C:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://localhost/C:")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:c%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:/c%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://c%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:///c%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:////c%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://///c%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://localhost/c%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:C%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:/C%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://C%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:///C%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file:////C%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://///C%3a")));            assertEquals(relWinPathEmptyURI, URIUtils.normalizeFileURI(new URI("file://localhost/C%3a")));            // Relative unix path URI            assertEquals(relUnixPathURI, URIUtils.normalizeFileURI(new URI("file:dir/file.tmp")));            assertEquals(relUnixPathURI, URIUtils.normalizeFileURI(new URI("file:dir%2Ffile.tmp")));            assertEquals(new URI("c"), URIUtils.normalizeFileURI(new URI("file:c")));            assertEquals(new URI("path?query#frag"), URIUtils.normalizeFileURI(new URI("file:path?query#frag")));            assertEquals(new URI("path?que%2Fry#frag"), URIUtils.normalizeFileURI(new URI("file:path?que%2Fry#frag")));            assertEquals(new URI("path?que/ry#frag"), URIUtils.normalizeFileURI(new URI("file:path?que/ry#frag")));            assertEquals(new URI("?query#frag"), URIUtils.normalizeFileURI(new URI("file:?query#frag")));            assertEquals(new URI("dir%3Ab%3Ab/b:b?b:b"), URIUtils.normalizeFileURI(new URI("file:dir:b:b/b:b?b:b")));            assertEquals(new URI("path%20path"), URIUtils.normalizeFileURI(new URI("file:path%20path")));            assertEquals(new URI("file:///c:/path%20path"), URIUtils.normalizeFileURI(new URI("file:/c:/path%20path")));        } catch (URISyntaxException e) {            String execPoint = null;            for (int i = 0; i < e.getStackTrace().length; i++) {                StackTraceElement ste = e.getStackTrace()[i];                if ("testNormalizeFileUri".equals(ste.getMethodName())) {                    execPoint = ste.toString();                }            }            fail("Threw URISyntaxException\n" + "Reason: " + e.toString() + "\nAt: " + execPoint);        }    }}